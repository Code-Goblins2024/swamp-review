create extension if not exists "pgtap" with schema "extensions";

create extension if not exists "postgis" with schema "extensions";


create type "public"."roles" as enum ('admin', 'user', 'moderator', 'faculty');

create type "public"."years" as enum ('First', 'Second', 'Third', 'Fourth', 'Fifth', 'Masters/Grad', 'Incoming', 'Other');

create table "public"."attributes" (
    "id" bigint generated by default as identity not null,
    "attribute_name" text not null
);


alter table "public"."attributes" enable row level security;

create table "public"."average_rating" (
    "id" bigint generated by default as identity not null,
    "housing_id" bigint,
    "category_id" bigint,
    "average_rating" real
);


alter table "public"."average_rating" enable row level security;

create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "name" character varying
);


alter table "public"."categories" enable row level security;

create table "public"."favorites" (
    "housing_id" bigint not null,
    "user_id" uuid not null
);


alter table "public"."favorites" enable row level security;

create table "public"."housing" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "address" text,
    "lat" double precision,
    "lng" double precision,
    "location" geography
);


alter table "public"."housing" enable row level security;

create table "public"."housing_tags" (
    "id" bigint generated by default as identity not null,
    "housing_id" bigint,
    "tag_id" bigint,
    "count" bigint
);


alter table "public"."housing_tags" enable row level security;

create table "public"."housing_to_attributes" (
    "housing_id" bigint not null,
    "attributes_id" bigint not null
);


alter table "public"."housing_to_attributes" enable row level security;

create table "public"."housing_to_ip" (
    "housing_id" bigint generated by default as identity not null,
    "interest_point_id" bigint not null
);


alter table "public"."housing_to_ip" enable row level security;

create table "public"."interest_points" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "lat" double precision,
    "lng" double precision,
    "address" text,
    "location" geography,
    "google_place_id" text
);


alter table "public"."interest_points" enable row level security;

create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "housing_id" bigint,
    "content" text,
    "user_id" uuid,
    "room_id" bigint
);


alter table "public"."reviews" enable row level security;

create table "public"."reviews_to_categories" (
    "id" bigint generated by default as identity not null,
    "review_id" bigint not null,
    "category_id" bigint not null,
    "rating_value" integer
);


alter table "public"."reviews_to_categories" enable row level security;

create table "public"."reviews_to_tags" (
    "review_id" bigint not null,
    "tag_id" bigint not null
);


alter table "public"."reviews_to_tags" enable row level security;

create table "public"."room_type" (
    "id" bigint generated by default as identity not null,
    "housing_id" bigint,
    "name" text,
    "fall_spring_price" double precision,
    "summer_AB_price" double precision,
    "summer_C_price" double precision
);


alter table "public"."room_type" enable row level security;

create table "public"."tags" (
    "id" bigint generated by default as identity not null,
    "name" text
);


alter table "public"."tags" enable row level security;

create table "public"."users" (
    "first_name" text default ''::text,
    "created_at" timestamp with time zone not null default now(),
    "id" uuid not null default auth.uid(),
    "major" text,
    "year" years,
    "role" roles default 'user'::roles,
    "email" text not null,
    "last_name" text default ''::text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX "attributes_attributeName_key" ON public.attributes USING btree (attribute_name);

CREATE UNIQUE INDEX attributes_pkey ON public.attributes USING btree (id);

CREATE UNIQUE INDEX "averageRating_pkey" ON public.average_rating USING btree (id);

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX housing_pkey ON public.housing USING btree (id);

CREATE UNIQUE INDEX housing_tags_pkey ON public.housing_tags USING btree (id);

CREATE UNIQUE INDEX housing_to_attributes_pkey ON public.housing_to_attributes USING btree (housing_id, attributes_id);

CREATE UNIQUE INDEX housing_to_ip_pkey ON public.housing_to_ip USING btree (housing_id, interest_point_id);

CREATE UNIQUE INDEX "interestPoints_pkey" ON public.interest_points USING btree (id);

CREATE UNIQUE INDEX "reviewsToCategories_pkey" ON public.reviews_to_categories USING btree (id, review_id, category_id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX reviews_to_tags_pkey ON public.reviews_to_tags USING btree (review_id, tag_id);

CREATE UNIQUE INDEX "roomType_pkey" ON public.room_type USING btree (id);

CREATE UNIQUE INDEX tags_name_key ON public.tags USING btree (name);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

CREATE UNIQUE INDEX unique_housing_category_pair ON public.average_rating USING btree (housing_id, category_id);

CREATE UNIQUE INDEX unique_housing_tag_pair ON public.housing_tags USING btree (housing_id, tag_id);

CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."attributes" add constraint "attributes_pkey" PRIMARY KEY using index "attributes_pkey";

alter table "public"."average_rating" add constraint "averageRating_pkey" PRIMARY KEY using index "averageRating_pkey";

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."housing" add constraint "housing_pkey" PRIMARY KEY using index "housing_pkey";

alter table "public"."housing_tags" add constraint "housing_tags_pkey" PRIMARY KEY using index "housing_tags_pkey";

alter table "public"."housing_to_attributes" add constraint "housing_to_attributes_pkey" PRIMARY KEY using index "housing_to_attributes_pkey";

alter table "public"."housing_to_ip" add constraint "housing_to_ip_pkey" PRIMARY KEY using index "housing_to_ip_pkey";

alter table "public"."interest_points" add constraint "interestPoints_pkey" PRIMARY KEY using index "interestPoints_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."reviews_to_categories" add constraint "reviewsToCategories_pkey" PRIMARY KEY using index "reviewsToCategories_pkey";

alter table "public"."reviews_to_tags" add constraint "reviews_to_tags_pkey" PRIMARY KEY using index "reviews_to_tags_pkey";

alter table "public"."room_type" add constraint "roomType_pkey" PRIMARY KEY using index "roomType_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."attributes" add constraint "attributes_attributeName_key" UNIQUE using index "attributes_attributeName_key";

alter table "public"."average_rating" add constraint "averageRating_housingId_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON DELETE CASCADE not valid;

alter table "public"."average_rating" validate constraint "averageRating_housingId_fkey";

alter table "public"."average_rating" add constraint "average_rating_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE not valid;

alter table "public"."average_rating" validate constraint "average_rating_category_id_fkey";

alter table "public"."average_rating" add constraint "unique_housing_category_pair" UNIQUE using index "unique_housing_category_pair";

alter table "public"."favorites" add constraint "favorites_housingId_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON DELETE CASCADE not valid;

alter table "public"."favorites" validate constraint "favorites_housingId_fkey";

alter table "public"."favorites" add constraint "favorites_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."favorites" validate constraint "favorites_user_id_fkey";

alter table "public"."housing_tags" add constraint "housing_tags_housing_id_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."housing_tags" validate constraint "housing_tags_housing_id_fkey";

alter table "public"."housing_tags" add constraint "housing_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) not valid;

alter table "public"."housing_tags" validate constraint "housing_tags_tag_id_fkey";

alter table "public"."housing_tags" add constraint "unique_housing_tag_pair" UNIQUE using index "unique_housing_tag_pair";

alter table "public"."housing_to_attributes" add constraint "housing_to_attributes_attributes_id_fkey" FOREIGN KEY (attributes_id) REFERENCES attributes(id) ON DELETE CASCADE not valid;

alter table "public"."housing_to_attributes" validate constraint "housing_to_attributes_attributes_id_fkey";

alter table "public"."housing_to_attributes" add constraint "housing_to_attributes_housing_id_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON DELETE CASCADE not valid;

alter table "public"."housing_to_attributes" validate constraint "housing_to_attributes_housing_id_fkey";

alter table "public"."housing_to_ip" add constraint "housing_to_ip_housing_id_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON DELETE CASCADE not valid;

alter table "public"."housing_to_ip" validate constraint "housing_to_ip_housing_id_fkey";

alter table "public"."housing_to_ip" add constraint "housing_to_ip_interest_point_id_fkey" FOREIGN KEY (interest_point_id) REFERENCES interest_points(id) ON DELETE CASCADE not valid;

alter table "public"."housing_to_ip" validate constraint "housing_to_ip_interest_point_id_fkey";

alter table "public"."reviews" add constraint "reviews_housing_id_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_housing_id_fkey";

alter table "public"."reviews" add constraint "reviews_room_id_fkey" FOREIGN KEY (room_id) REFERENCES room_type(id) not valid;

alter table "public"."reviews" validate constraint "reviews_room_id_fkey";

alter table "public"."reviews" add constraint "reviews_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey";

alter table "public"."reviews_to_categories" add constraint "reviews_to_categories_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE not valid;

alter table "public"."reviews_to_categories" validate constraint "reviews_to_categories_category_id_fkey";

alter table "public"."reviews_to_categories" add constraint "reviews_to_categories_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reviews_to_categories" validate constraint "reviews_to_categories_review_id_fkey";

alter table "public"."reviews_to_tags" add constraint "reviews_to_tags_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE not valid;

alter table "public"."reviews_to_tags" validate constraint "reviews_to_tags_review_id_fkey";

alter table "public"."reviews_to_tags" add constraint "reviews_to_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid;

alter table "public"."reviews_to_tags" validate constraint "reviews_to_tags_tag_id_fkey";

alter table "public"."room_type" add constraint "room_type_housing_id_fkey" FOREIGN KEY (housing_id) REFERENCES housing(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."room_type" validate constraint "room_type_housing_id_fkey";

alter table "public"."tags" add constraint "tags_name_key" UNIQUE using index "tags_name_key";

alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_average_rating(housing_id bigint, category_id bigint)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
DECLARE
    avg_rating NUMERIC;
BEGIN
    -- Calculate the average rating for the given housing and category
    SELECT AVG(rtc.rating_value) INTO avg_rating
    FROM reviews_to_categories rtc
    INNER JOIN reviews r ON rtc.review_id = r.id
    WHERE rtc.category_id = category_id
    AND r.housing_id = housing_id;

    -- Return the calculated average rating or NULL if no ratings exist
    RETURN avg_rating;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_avg_rating_by_category(target_housing_id integer)
 RETURNS TABLE(category_id bigint, category character varying, value numeric)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY
    SELECT c.id AS category_id, c.name AS category, AVG(rtc.rating_value) AS value
    FROM reviews r
    JOIN reviews_to_categories rtc ON r.id = rtc.review_id
    JOIN categories c ON rtc.category_id = c.id
    WHERE r.housing_id = target_housing_id
    GROUP BY c.id
    ORDER BY c.id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_avg_ratings_for_all_housing()
 RETURNS TABLE(housing_id bigint, category_id bigint, category character varying, value numeric)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY
    SELECT r.housing_id AS housing_id, c.id AS category_id, c.name AS category, AVG(rtc.rating_value) AS value
    FROM reviews r
    JOIN reviews_to_categories rtc ON r.id = rtc.review_id
    JOIN categories c ON rtc.category_id = c.id
    WHERE c.id > -1
    GROUP BY r.housing_id, c.id
    ORDER BY c.id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_avg_ratings_for_single_housing(target_housing_id integer)
 RETURNS TABLE(category_id bigint, category character varying, value numeric)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY
    SELECT c.id AS category_id, c.name AS category, AVG(rtc.rating_value) AS value
    FROM reviews r
    JOIN reviews_to_categories rtc ON r.id = rtc.review_id
    JOIN categories c ON rtc.category_id = c.id
    WHERE r.housing_id = target_housing_id
    AND c.id > -1
    GROUP BY c.id
    ORDER BY c.id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_tag_counts_for_all_housing()
 RETURNS TABLE(housing_id integer, tag_name text, tag_count integer)
 LANGUAGE sql
 STABLE
AS $function$
SELECT 
    r.housing_id,
    t.name AS tag_name,
    COUNT(*) AS tag_count
FROM reviews r
JOIN reviews_to_tags rt ON r.id = rt.review_id
JOIN tags t ON rt.tag_id = t.id
WHERE t.id > -1
GROUP BY r.housing_id, t.name
ORDER BY tag_count DESC;
$function$
;

CREATE OR REPLACE FUNCTION public.get_tag_counts_for_single_housing(housing_id_param integer)
 RETURNS TABLE(housing_id integer, tag_name text, tag_count integer)
 LANGUAGE sql
 STABLE
AS $function$
SELECT 
    r.housing_id,
    t.name AS tag_name,
    COUNT(*) AS tag_count
FROM reviews r
JOIN reviews_to_tags rt ON r.id = rt.review_id
JOIN tags t ON rt.tag_id = t.id
WHERE r.housing_id = housing_id_param
AND t.id > -1
GROUP BY r.housing_id, t.name
ORDER BY tag_count DESC;
$function$
;

CREATE OR REPLACE FUNCTION public.update_average_rating()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    new_category_id BIGINT;
    housing BIGINT;
    new_avg NUMERIC;
    new_review_id BIGINT;
BEGIN
    -- Determine the operation type (INSERT, UPDATE, DELETE) and get the appropriate values
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        new_category_id := NEW.category_id;
        new_review_id := NEW.review_id;
    ELSIF TG_OP = 'DELETE' THEN
        new_category_id := OLD.category_id;
        new_review_id := OLD.review_id;
    END IF;

    -- Get housing_id using the review_id
    SELECT r.housing_id INTO housing
    FROM reviews r
    WHERE r.id = new_review_id;

    raise log 'housing id %', housing;

    -- Calculate the new average rating for the category and housing
    SELECT AVG(rtc.rating_value) INTO new_avg
    FROM reviews_to_categories rtc
    INNER JOIN reviews r ON rtc.review_id = r.id
    WHERE rtc.category_id = new_category_id
    AND r.housing_id = housing;

    raise log 'new average rating %', new_avg;
    raise log 'rating value %', new_avg;
    raise log 'housing id %', housing;

    -- Update the average_rating table with the new average, or set to NULL if no reviews remain
    IF new_avg IS NULL THEN
        -- Set average_rating to NULL if no valid reviews remain
        UPDATE average_rating 
        SET average_rating = NULL
        WHERE housing_id = housing AND category_id = new_category_id;
    ELSE
        -- Insert or update the average_rating table with the recalculated average
        INSERT INTO average_rating (housing_id, category_id, average_rating)
        VALUES (housing, new_category_id, new_avg)
        ON CONFLICT (housing_id, category_id) 
        DO UPDATE
        SET average_rating = EXCLUDED.average_rating; 
    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_location_geography()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.location := ST_SetSRID(ST_MakePoint(NEW.lng, NEW.lat), 4326)::geography;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_tag_count()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    new_housing_id BIGINT;
    new_tag_id BIGINT;
    new_review_id BIGINT;
    new_count NUMERIC;
BEGIN
    -- Determine the operation type (INSERT, UPDATE, DELETE) and get the appropriate values
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        new_tag_id := NEW.tag_id;
        new_review_id := NEW.review_id;
    ELSIF TG_OP = 'DELETE' THEN
        new_tag_id := OLD.tag_id;
        new_review_id := OLD.review_id;
    END IF;

    -- Get housing_id using the review_id
    SELECT r.housing_id INTO new_housing_id
    FROM reviews r
    WHERE r.id = new_review_id;

    -- Join table to get all reviews with the same housing id and count
    SELECT COUNT(*) INTO new_count
    FROM reviews_to_tags rtt
    INNER JOIN reviews r ON rtt.review_id = r.id
    WHERE rtt.tag_id = new_tag_id
    AND r.housing_id = new_housing_id;

    -- Insert or update the hosuing_tags table with the recalculated count
    INSERT INTO housing_tags (housing_id, tag_id, count)
    VALUES (new_housing_id, new_tag_id, new_count)
    ON CONFLICT (housing_id, tag_id) 
    DO UPDATE
    SET count = EXCLUDED.count; 


    RETURN NEW;
END;
$function$
;

grant delete on table "public"."attributes" to "anon";

grant insert on table "public"."attributes" to "anon";

grant references on table "public"."attributes" to "anon";

grant select on table "public"."attributes" to "anon";

grant trigger on table "public"."attributes" to "anon";

grant truncate on table "public"."attributes" to "anon";

grant update on table "public"."attributes" to "anon";

grant delete on table "public"."attributes" to "authenticated";

grant insert on table "public"."attributes" to "authenticated";

grant references on table "public"."attributes" to "authenticated";

grant select on table "public"."attributes" to "authenticated";

grant trigger on table "public"."attributes" to "authenticated";

grant truncate on table "public"."attributes" to "authenticated";

grant update on table "public"."attributes" to "authenticated";

grant delete on table "public"."attributes" to "service_role";

grant insert on table "public"."attributes" to "service_role";

grant references on table "public"."attributes" to "service_role";

grant select on table "public"."attributes" to "service_role";

grant trigger on table "public"."attributes" to "service_role";

grant truncate on table "public"."attributes" to "service_role";

grant update on table "public"."attributes" to "service_role";

grant delete on table "public"."average_rating" to "anon";

grant insert on table "public"."average_rating" to "anon";

grant references on table "public"."average_rating" to "anon";

grant select on table "public"."average_rating" to "anon";

grant trigger on table "public"."average_rating" to "anon";

grant truncate on table "public"."average_rating" to "anon";

grant update on table "public"."average_rating" to "anon";

grant delete on table "public"."average_rating" to "authenticated";

grant insert on table "public"."average_rating" to "authenticated";

grant references on table "public"."average_rating" to "authenticated";

grant select on table "public"."average_rating" to "authenticated";

grant trigger on table "public"."average_rating" to "authenticated";

grant truncate on table "public"."average_rating" to "authenticated";

grant update on table "public"."average_rating" to "authenticated";

grant delete on table "public"."average_rating" to "service_role";

grant insert on table "public"."average_rating" to "service_role";

grant references on table "public"."average_rating" to "service_role";

grant select on table "public"."average_rating" to "service_role";

grant trigger on table "public"."average_rating" to "service_role";

grant truncate on table "public"."average_rating" to "service_role";

grant update on table "public"."average_rating" to "service_role";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."favorites" to "anon";

grant insert on table "public"."favorites" to "anon";

grant references on table "public"."favorites" to "anon";

grant select on table "public"."favorites" to "anon";

grant trigger on table "public"."favorites" to "anon";

grant truncate on table "public"."favorites" to "anon";

grant update on table "public"."favorites" to "anon";

grant delete on table "public"."favorites" to "authenticated";

grant insert on table "public"."favorites" to "authenticated";

grant references on table "public"."favorites" to "authenticated";

grant select on table "public"."favorites" to "authenticated";

grant trigger on table "public"."favorites" to "authenticated";

grant truncate on table "public"."favorites" to "authenticated";

grant update on table "public"."favorites" to "authenticated";

grant delete on table "public"."favorites" to "service_role";

grant insert on table "public"."favorites" to "service_role";

grant references on table "public"."favorites" to "service_role";

grant select on table "public"."favorites" to "service_role";

grant trigger on table "public"."favorites" to "service_role";

grant truncate on table "public"."favorites" to "service_role";

grant update on table "public"."favorites" to "service_role";

grant delete on table "public"."housing" to "anon";

grant insert on table "public"."housing" to "anon";

grant references on table "public"."housing" to "anon";

grant select on table "public"."housing" to "anon";

grant trigger on table "public"."housing" to "anon";

grant truncate on table "public"."housing" to "anon";

grant update on table "public"."housing" to "anon";

grant delete on table "public"."housing" to "authenticated";

grant insert on table "public"."housing" to "authenticated";

grant references on table "public"."housing" to "authenticated";

grant select on table "public"."housing" to "authenticated";

grant trigger on table "public"."housing" to "authenticated";

grant truncate on table "public"."housing" to "authenticated";

grant update on table "public"."housing" to "authenticated";

grant delete on table "public"."housing" to "service_role";

grant insert on table "public"."housing" to "service_role";

grant references on table "public"."housing" to "service_role";

grant select on table "public"."housing" to "service_role";

grant trigger on table "public"."housing" to "service_role";

grant truncate on table "public"."housing" to "service_role";

grant update on table "public"."housing" to "service_role";

grant delete on table "public"."housing_tags" to "anon";

grant insert on table "public"."housing_tags" to "anon";

grant references on table "public"."housing_tags" to "anon";

grant select on table "public"."housing_tags" to "anon";

grant trigger on table "public"."housing_tags" to "anon";

grant truncate on table "public"."housing_tags" to "anon";

grant update on table "public"."housing_tags" to "anon";

grant delete on table "public"."housing_tags" to "authenticated";

grant insert on table "public"."housing_tags" to "authenticated";

grant references on table "public"."housing_tags" to "authenticated";

grant select on table "public"."housing_tags" to "authenticated";

grant trigger on table "public"."housing_tags" to "authenticated";

grant truncate on table "public"."housing_tags" to "authenticated";

grant update on table "public"."housing_tags" to "authenticated";

grant delete on table "public"."housing_tags" to "service_role";

grant insert on table "public"."housing_tags" to "service_role";

grant references on table "public"."housing_tags" to "service_role";

grant select on table "public"."housing_tags" to "service_role";

grant trigger on table "public"."housing_tags" to "service_role";

grant truncate on table "public"."housing_tags" to "service_role";

grant update on table "public"."housing_tags" to "service_role";

grant delete on table "public"."housing_to_attributes" to "anon";

grant insert on table "public"."housing_to_attributes" to "anon";

grant references on table "public"."housing_to_attributes" to "anon";

grant select on table "public"."housing_to_attributes" to "anon";

grant trigger on table "public"."housing_to_attributes" to "anon";

grant truncate on table "public"."housing_to_attributes" to "anon";

grant update on table "public"."housing_to_attributes" to "anon";

grant delete on table "public"."housing_to_attributes" to "authenticated";

grant insert on table "public"."housing_to_attributes" to "authenticated";

grant references on table "public"."housing_to_attributes" to "authenticated";

grant select on table "public"."housing_to_attributes" to "authenticated";

grant trigger on table "public"."housing_to_attributes" to "authenticated";

grant truncate on table "public"."housing_to_attributes" to "authenticated";

grant update on table "public"."housing_to_attributes" to "authenticated";

grant delete on table "public"."housing_to_attributes" to "service_role";

grant insert on table "public"."housing_to_attributes" to "service_role";

grant references on table "public"."housing_to_attributes" to "service_role";

grant select on table "public"."housing_to_attributes" to "service_role";

grant trigger on table "public"."housing_to_attributes" to "service_role";

grant truncate on table "public"."housing_to_attributes" to "service_role";

grant update on table "public"."housing_to_attributes" to "service_role";

grant delete on table "public"."housing_to_ip" to "anon";

grant insert on table "public"."housing_to_ip" to "anon";

grant references on table "public"."housing_to_ip" to "anon";

grant select on table "public"."housing_to_ip" to "anon";

grant trigger on table "public"."housing_to_ip" to "anon";

grant truncate on table "public"."housing_to_ip" to "anon";

grant update on table "public"."housing_to_ip" to "anon";

grant delete on table "public"."housing_to_ip" to "authenticated";

grant insert on table "public"."housing_to_ip" to "authenticated";

grant references on table "public"."housing_to_ip" to "authenticated";

grant select on table "public"."housing_to_ip" to "authenticated";

grant trigger on table "public"."housing_to_ip" to "authenticated";

grant truncate on table "public"."housing_to_ip" to "authenticated";

grant update on table "public"."housing_to_ip" to "authenticated";

grant delete on table "public"."housing_to_ip" to "service_role";

grant insert on table "public"."housing_to_ip" to "service_role";

grant references on table "public"."housing_to_ip" to "service_role";

grant select on table "public"."housing_to_ip" to "service_role";

grant trigger on table "public"."housing_to_ip" to "service_role";

grant truncate on table "public"."housing_to_ip" to "service_role";

grant update on table "public"."housing_to_ip" to "service_role";

grant delete on table "public"."interest_points" to "anon";

grant insert on table "public"."interest_points" to "anon";

grant references on table "public"."interest_points" to "anon";

grant select on table "public"."interest_points" to "anon";

grant trigger on table "public"."interest_points" to "anon";

grant truncate on table "public"."interest_points" to "anon";

grant update on table "public"."interest_points" to "anon";

grant delete on table "public"."interest_points" to "authenticated";

grant insert on table "public"."interest_points" to "authenticated";

grant references on table "public"."interest_points" to "authenticated";

grant select on table "public"."interest_points" to "authenticated";

grant trigger on table "public"."interest_points" to "authenticated";

grant truncate on table "public"."interest_points" to "authenticated";

grant update on table "public"."interest_points" to "authenticated";

grant delete on table "public"."interest_points" to "service_role";

grant insert on table "public"."interest_points" to "service_role";

grant references on table "public"."interest_points" to "service_role";

grant select on table "public"."interest_points" to "service_role";

grant trigger on table "public"."interest_points" to "service_role";

grant truncate on table "public"."interest_points" to "service_role";

grant update on table "public"."interest_points" to "service_role";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

grant delete on table "public"."reviews_to_categories" to "anon";

grant insert on table "public"."reviews_to_categories" to "anon";

grant references on table "public"."reviews_to_categories" to "anon";

grant select on table "public"."reviews_to_categories" to "anon";

grant trigger on table "public"."reviews_to_categories" to "anon";

grant truncate on table "public"."reviews_to_categories" to "anon";

grant update on table "public"."reviews_to_categories" to "anon";

grant delete on table "public"."reviews_to_categories" to "authenticated";

grant insert on table "public"."reviews_to_categories" to "authenticated";

grant references on table "public"."reviews_to_categories" to "authenticated";

grant select on table "public"."reviews_to_categories" to "authenticated";

grant trigger on table "public"."reviews_to_categories" to "authenticated";

grant truncate on table "public"."reviews_to_categories" to "authenticated";

grant update on table "public"."reviews_to_categories" to "authenticated";

grant delete on table "public"."reviews_to_categories" to "service_role";

grant insert on table "public"."reviews_to_categories" to "service_role";

grant references on table "public"."reviews_to_categories" to "service_role";

grant select on table "public"."reviews_to_categories" to "service_role";

grant trigger on table "public"."reviews_to_categories" to "service_role";

grant truncate on table "public"."reviews_to_categories" to "service_role";

grant update on table "public"."reviews_to_categories" to "service_role";

grant delete on table "public"."reviews_to_tags" to "anon";

grant insert on table "public"."reviews_to_tags" to "anon";

grant references on table "public"."reviews_to_tags" to "anon";

grant select on table "public"."reviews_to_tags" to "anon";

grant trigger on table "public"."reviews_to_tags" to "anon";

grant truncate on table "public"."reviews_to_tags" to "anon";

grant update on table "public"."reviews_to_tags" to "anon";

grant delete on table "public"."reviews_to_tags" to "authenticated";

grant insert on table "public"."reviews_to_tags" to "authenticated";

grant references on table "public"."reviews_to_tags" to "authenticated";

grant select on table "public"."reviews_to_tags" to "authenticated";

grant trigger on table "public"."reviews_to_tags" to "authenticated";

grant truncate on table "public"."reviews_to_tags" to "authenticated";

grant update on table "public"."reviews_to_tags" to "authenticated";

grant delete on table "public"."reviews_to_tags" to "service_role";

grant insert on table "public"."reviews_to_tags" to "service_role";

grant references on table "public"."reviews_to_tags" to "service_role";

grant select on table "public"."reviews_to_tags" to "service_role";

grant trigger on table "public"."reviews_to_tags" to "service_role";

grant truncate on table "public"."reviews_to_tags" to "service_role";

grant update on table "public"."reviews_to_tags" to "service_role";

grant delete on table "public"."room_type" to "anon";

grant insert on table "public"."room_type" to "anon";

grant references on table "public"."room_type" to "anon";

grant select on table "public"."room_type" to "anon";

grant trigger on table "public"."room_type" to "anon";

grant truncate on table "public"."room_type" to "anon";

grant update on table "public"."room_type" to "anon";

grant delete on table "public"."room_type" to "authenticated";

grant insert on table "public"."room_type" to "authenticated";

grant references on table "public"."room_type" to "authenticated";

grant select on table "public"."room_type" to "authenticated";

grant trigger on table "public"."room_type" to "authenticated";

grant truncate on table "public"."room_type" to "authenticated";

grant update on table "public"."room_type" to "authenticated";

grant delete on table "public"."room_type" to "service_role";

grant insert on table "public"."room_type" to "service_role";

grant references on table "public"."room_type" to "service_role";

grant select on table "public"."room_type" to "service_role";

grant trigger on table "public"."room_type" to "service_role";

grant truncate on table "public"."room_type" to "service_role";

grant update on table "public"."room_type" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable read access for all users"
on "public"."attributes"
as permissive
for select
to public
using (true);


create policy "Enable insert access for all users"
on "public"."average_rating"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."average_rating"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."categories"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."favorites"
as permissive
for select
to public
using (true);


create policy "Favorite functionality for all users"
on "public"."favorites"
as permissive
for all
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."housing"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."housing_to_attributes"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."housing_to_ip"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."interest_points"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."reviews"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."reviews"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."reviews"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."reviews_to_categories"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."reviews_to_categories"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."reviews_to_tags"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."reviews_to_tags"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."room_type"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."tags"
as permissive
for select
to public
using (true);


create policy "Enable insert access for all users"
on "public"."users"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for all users"
on "public"."users"
as permissive
for select
to public
using (true);


CREATE TRIGGER update_location_geography_trigger BEFORE INSERT OR UPDATE ON public.interest_points FOR EACH ROW EXECUTE FUNCTION update_location_geography();

CREATE TRIGGER review_to_tags_change AFTER INSERT OR DELETE OR UPDATE ON public.reviews_to_tags FOR EACH ROW EXECUTE FUNCTION update_tag_count();


